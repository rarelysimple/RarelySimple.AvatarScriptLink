"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1565],{96886:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>p});var n=o(60227),i=o(74848),s=o(28453);const r={slug:"deployment-methods-for-your-dotnet-scriptlink-solution",title:"Deployment Methods for Your .NET ScriptLink Solution",authors:["scottolsonjr"],tags:["scriptlink","myavatar","dotnet","deployment","web deploy","asp.net","azure devops","azure pipelines"]},l=void 0,a={authorsImageUrls:[void 0]},p=[{value:"Option #1: Create a Package",id:"option-1-create-a-package",level:2},{value:"Option #2: Web Deploy",id:"option-2-web-deploy",level:2},{value:"Option #3: Azure Pipelines",id:"option-3-azure-pipelines",level:2},{value:"Let&#39;s Deploy",id:"lets-deploy",level:2}];function u(e){const t={a:"a",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Congratulations! You have created your \u201cHello, World!\u201d ScriptLink web application, tested it with Unit Tests, tested it on your development web server, and submitted your code to a source control solution. Next, we will be looking at various methods for deploying our .NET ScriptLink applications. This will enable us to setup our Test server to use with UAT or other myAvatar Test environment and later the Production server to use with our LIVE or other production myAvatar environment."}),"\n","\n",(0,i.jsx)(t.p,{children:"As a review, what I described above is a basic workflow for the testing of your changes to the ScriptLink solution. Testing should be as thorough as possible and in general you should not move to the next stage of testing until all tests have passed in the current."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Test your code changes with Unit Tests."}),"\n",(0,i.jsx)(t.li,{children:"Test your code changes with your development web server. (e.g., Visual Studio debugger (F5))"}),"\n",(0,i.jsx)(t.li,{children:"Test your code changes with your Test web server connected to your test myAvatar environment."}),"\n",(0,i.jsx)(t.li,{children:"Release to production according to your change management protocols."}),"\n",(0,i.jsx)(t.li,{children:"Deployment of our project to the web server is basically moving files. However, the more mature options include features to automate selection of the files, the moving of the files, restarting the web app, and other various tasks. Let\u2019s take a look at these options."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"option-1-create-a-package",children:"Option #1: Create a Package"}),"\n",(0,i.jsx)(t.p,{children:"This is the closest to more traditional deployments. In this method, you create a zip file with all of the required files to import into IIS. I have had to use this method when the web host didn\u2019t allow the subsequent methods I will discuss or the host limits access to the web application except from the myAvatar server."}),"\n",(0,i.jsx)(t.h2,{id:"option-2-web-deploy",children:"Option #2: Web Deploy"}),"\n",(0,i.jsxs)(t.p,{children:["This has been my go to solution for many years and ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/",children:"the Microsoft documentation on ASP.NET deployment"})," leverages this method. This is significantly better than the previous option, but not the best. It balances ease of use and complexity. It is also well established."]}),"\n",(0,i.jsx)(t.p,{children:"Another benefit of this option is that the developer or the one who deploys does not require any administrative rights on the web server itself. This means that you can separate out those duties between your server admin and your application developer."}),"\n",(0,i.jsx)(t.p,{children:"Here's an overview of this workflow."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Right-click on your web application project in Visual Studio and select Publish\u2026"}),"\n",(0,i.jsx)(t.li,{children:"Select the Test environment to deploy to."}),"\n",(0,i.jsx)(t.li,{children:"Select Publish."}),"\n",(0,i.jsx)(t.li,{children:"Once published, the web app will be launched."}),"\n",(0,i.jsx)(t.li,{children:"Once testing in UAT is complete, repeat for the Production environment."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Here is a demonstration of Web Deploy from 2018 used with Azure."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://youtu.be/6VK370-Yk3A",alt:""})}),"\n",(0,i.jsx)(t.p,{children:"I will walk through setting this up in more detail in a future article."}),"\n",(0,i.jsx)(t.h2,{id:"option-3-azure-pipelines",children:"Option #3: Azure Pipelines"}),"\n",(0,i.jsx)(t.p,{children:"This is an ideal option whether you are hosting your ScriptLink application on-premise or in the Netsmart cloud. However, this is a relatively new solution offering from Microsoft. It uses Continuous Integration and Continuous Deployment (CI/CD) processes to help you build a healthier release process. I especially like that you can deploy your Test or Production code to on-premises servers (yes plural) automatically and without opening your firewall. Any on premises IIS server can get the release as long as it has Internet access."}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s an overview of the workflow."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Make sure all changes have been committed and pushed to the remote repository."}),"\n",(0,i.jsx)(t.li,{children:"Create a release."}),"\n",(0,i.jsx)(t.li,{children:"Your code is built and tests run automatically."}),"\n",(0,i.jsx)(t.li,{children:"If your tests pass, the code is deployed to your test server(s)."}),"\n",(0,i.jsx)(t.li,{children:"Once testing in UAT is complete, initiate deployment to production server(s)."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Azure DevOps published a great demonstration on this last year."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://youtu.be/_sUf0wqJYXo",alt:""})}),"\n",(0,i.jsx)(t.h2,{id:"lets-deploy",children:"Let's Deploy"}),"\n",(0,i.jsx)(t.p,{children:"Hopefully, these options peak your interest and you are interested in modernizing your deployment strategy. In Visual Studio 2019, right-click Publish can still be used to create a package to transfer and import, however I think you will really like Web Deploy or Azure Pipelines."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>l});var n=o(96540);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}},60227:e=>{e.exports=JSON.parse('{"permalink":"/blog/deployment-methods-for-your-dotnet-scriptlink-solution","source":"@site/blog/2020-03-31-deployment-methods-for-your-dotnet-scriptlink-solution/index.mdx","title":"Deployment Methods for Your .NET ScriptLink Solution","description":"Congratulations! You have created your \u201cHello, World!\u201d ScriptLink web application, tested it with Unit Tests, tested it on your development web server, and submitted your code to a source control solution. Next, we will be looking at various methods for deploying our .NET ScriptLink applications. This will enable us to setup our Test server to use with UAT or other myAvatar Test environment and later the Production server to use with our LIVE or other production myAvatar environment.","date":"2020-03-31T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"web deploy","permalink":"/blog/tags/web-deploy"},{"inline":true,"label":"asp.net","permalink":"/blog/tags/asp-net"},{"inline":true,"label":"azure devops","permalink":"/blog/tags/azure-devops"},{"inline":true,"label":"azure pipelines","permalink":"/blog/tags/azure-pipelines"}],"readingTime":3.42,"hasTruncateMarker":true,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr","page":null}],"frontMatter":{"slug":"deployment-methods-for-your-dotnet-scriptlink-solution","title":"Deployment Methods for Your .NET ScriptLink Solution","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","deployment","web deploy","asp.net","azure devops","azure pipelines"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.0.6","permalink":"/blog/announcing-avatarscriptlink.net-1.0.6"},"nextItem":{"title":"Announcing AvatarScriptLink.NET General Availability","permalink":"/blog/announcing-avatarscriptlink.net-general-availability"}}')}}]);