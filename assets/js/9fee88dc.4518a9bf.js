"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[559],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>w});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(n),b=a,w=m["".concat(c,".").concat(b)]||m[b]||p[b]||r;return n?o.createElement(w,i(i({ref:t},s),{},{components:n})):o.createElement(w,i({ref:t},s))}));function w(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},8542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));const r={title:"Multiple-Iteration Tables",image:"./MultipleIterationTables.png",sidebar_position:1},i=void 0,l={unversionedId:"dotnet/advanced/multiple-iteration-tables",id:"dotnet/advanced/multiple-iteration-tables",title:"Multiple-Iteration Tables",description:"Multiple-iteration tables are a special kind of FormObject that allow for multiple RowObjects.",source:"@site/docs/dotnet/advanced/multiple-iteration-tables.md",sourceDirName:"dotnet/advanced",slug:"/dotnet/advanced/multiple-iteration-tables",permalink:"/docs/dotnet/advanced/multiple-iteration-tables",draft:!1,editUrl:"https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/tree/main/docs/docs/dotnet/advanced/multiple-iteration-tables.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Multiple-Iteration Tables",image:"./MultipleIterationTables.png",sidebar_position:1},sidebar:"dotnetSidebar",previous:{title:"RowAction",permalink:"/docs/dotnet/data-model/rowaction"},next:{title:"AvatarScriptLink.NET Changelog",permalink:"/docs/dotnet/changelog/"}},c={image:n(5848).Z},d=[{value:"Reading RowObjects",id:"reading-rowobjects",level:2},{value:"Adding RowObjects",id:"adding-rowobjects",level:2},{value:"Editing RowObjects",id:"editing-rowobjects",level:2},{value:"Deleting RowObjects",id:"deleting-rowobjects",level:2},{value:"Handling Exceptions",id:"handling-exceptions",level:2}],s={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Multiple-iteration tables are a special kind of ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/formobject"},"FormObject")," that allow for multiple ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObjects"),"."),(0,a.kt)("p",null,"There are some constraints when working with multiple-iteration tables."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cannot be the first ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/formobject"},"FormObject")," in an ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/optionobject2015"},"OptionObject"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/rowobject"},"RowObjects")," cannot share the same RowId."),(0,a.kt)("li",{parentName:"ul"},"The ParentRowId is to be set with the RowId assigned to the primary FormObject's CurrentRow.")),(0,a.kt)("p",null,"The AvatarScriptLink.NET library helps with managing these constraints by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Throwing an exception when attempting to add additional ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/rowobject"},"RowObjects")," to a non-multiple-iteration ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/formobject"},"FormObject"),"."),(0,a.kt)("li",{parentName:"ul"},"Automatically setting the ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/rowaction"},"RowAction"),"."),(0,a.kt)("li",{parentName:"ul"},"Automatically assigning RowIds to prevent duplicates."),(0,a.kt)("li",{parentName:"ul"},"Automatically adds new ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/rowobject"},"RowObjects")," to OtherRows when CurrentRow is already set."),(0,a.kt)("li",{parentName:"ul"},"Helping look up the ParentRowId.")),(0,a.kt)("h2",{id:"reading-rowobjects"},"Reading RowObjects"),(0,a.kt)("p",null,"How we read ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObjects")," may vary by use specific needs. For example, if you need all values from a single FieldNumber:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Read all values of a single field"',title:'"Read',all:!0,values:!0,of:!0,a:!0,single:!0,'field"':!0},'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\nList<string> values = optionObject.GetFieldValues(miFormId);\n\n// work with values\n\nreturn clone.ToReturnOptionObject();\n')),(0,a.kt)("p",null,"If you need to interact with multiple ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/fieldobject"},"FieldObjects")," in each ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObject")," (e.g., validating values)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Read RowObjects in a multiple-iteration table"',title:'"Read',RowObjects:!0,in:!0,a:!0,"multiple-iteration":!0,'table"':!0},'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\n\nforeach (FormObject formObject in clone.Forms)\n{\n    if (formObject.FormId == secondFormId)\n    {\n        var selectedRow = formObject.CurrentRow;\n        // read RowObject\n        foreach (RowObject rowObject in formObject.OtherRows)\n        {\n            // read other RowObjects\n        }\n    }\n}\n\nreturn clone.ToReturnOptionObject();\n')),(0,a.kt)("h2",{id:"adding-rowobjects"},"Adding RowObjects"),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"At this time we want to avoid using the ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObject")," Builder to build the ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObjects")," as it requires setting the RowId instead of allowing the AddRowObject method to auto-assign it. This may change in a future update.")),(0,a.kt)("p",null,"To take advantage of the library features described above, we want to use the AddRowObject method exclusively to add the new rows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Add multiple RowObjects to a multiple-iteration table"',title:'"Add',multiple:!0,RowObjects:!0,to:!0,a:!0,"multiple-iteration":!0,'table"':!0},'var clone = _optionObject.Clone();\n\nvar parentFormId = "110";\nvar miFormId = "123";\nvar parentRowId = clone.GetCurrentRowId(parentFormId);\n\nvar firstRow = new RowObject();\nfirstRow.RowAction = RowAction.Add;\nfirstRow.ParentRowId = parentRowId;\nfirstRow.AddFieldObject(new FieldObject("123.45", "Test #1"));\nclone.AddRowObject(miFormId, firstRow);\n\nvar secondRow = new RowObject();\nsecondRow.RowAction = RowAction.Add;\nsecondRow.ParentRowId = parentRowId;\nsecondRow.AddFieldObject(new FieldObject("123.45", "Test #2"));\nclone.AddRowObject(miFormId, secondRow);\n\nreturn clone.ToReturnOptionObject();\n')),(0,a.kt)("h2",{id:"editing-rowobjects"},"Editing RowObjects"),(0,a.kt)("p",null,"Editing rows in a multiple-iteration table can be tricky. It is recommended to do plenty of testing and validation to ensure the user experience is as expected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Set a value on all rows in a multiple-iteration table"',title:'"Set',a:!0,value:!0,on:!0,all:!0,rows:!0,in:!0,"multiple-iteration":!0,'table"':!0},'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\n\nforeach (FormObject formObject in clone.Forms)\n{\n    if (formObject.FormId == secondFormId)\n    {\n        var selectedRow = formObject.CurrentRow;\n        // Using the SetFieldValue method automatically sets the RowAction to EDIT\n        selectedRow.SetFieldValue("234.56", "Edited by ScriptLink API");\n\n        foreach (RowObject rowObject in formObject.OtherRows)\n        {\n            rowObject.SetFieldValue("234.56", "Edited by ScriptLink API");\n        }\n    }\n}\n\nreturn clone.ToReturnOptionObject();\n')),(0,a.kt)("h2",{id:"deleting-rowobjects"},"Deleting RowObjects"),(0,a.kt)("p",null,"Deleting ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObject")," is accomplished by setting the ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowaction"},"RowAction")," to DELETE. This can be accomplished a couple ways. The first is the most straightforward but requires RowId of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObject")," to delete."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Delete a RowObject by RowId"',title:'"Delete',a:!0,RowObject:!0,by:!0,'RowId"':!0},'var clone = _optionObject.Clone();\n\nvar rowIdToDelete = "123||4";\nclone.DeleteRowObject(rowIdToDelete);\n\nreturn clone.ToReturnOptionObject();\n')),(0,a.kt)("p",null,"In most cases, the RowId of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/dotnet/data-model/rowobject"},"RowObject(s)")," will not be fixed or known when the API is called."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Delete all rows in a multiple-iteration table"',title:'"Delete',all:!0,rows:!0,in:!0,a:!0,"multiple-iteration":!0,'table"':!0},'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\n\nforeach (FormObject formObject in clone.Forms)\n{\n    if (formObject.FormId == secondFormId)\n    {\n        if (formObject.CurrentRow != null && formObject.CurrentRow.RowId)\n            formObject.DeleteRowObject(formObject.CurrentRow.RowId);\n        foreach (RowObject rowObject in formObject.OtherRows)\n        {\n            if (rowObject.RowId != null)\n                formObject.DeleteRowObject(rowObject.RowId);\n        }\n    }\n}\n\nreturn clone.ToReturnOptionObject();\n')),(0,a.kt)("h2",{id:"handling-exceptions"},"Handling Exceptions"),(0,a.kt)("p",null,"Two of the most common errors that can occur include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Attempting to reference a ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/formobject"},"FormObject")," that is not in this ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/optionobject2015"},"OptionObject"),"."),(0,a.kt)("li",{parentName:"ul"},"Attempting to add multiple ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/rowobject"},"RowObjects")," to a non-multiple iteration ",(0,a.kt)("a",{parentName:"li",href:"/docs/dotnet/data-model/formobject"},"FormObject"),".")),(0,a.kt)("p",null,"This can be handled with conditionals and exception handling."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Handling exceptions with if/else and try/catch"',title:'"Handling',exceptions:!0,with:!0,"if/else":!0,and:!0,'try/catch"':!0},'var clone = _optionObject.Clone();\n\nvar parentFormId = "110";\nvar miFormId = "123";\n\nif (clone.IsFormPresent(parentFormId))\n{\n    try\n    {\n        var parentRowId = clone.GetCurrentRowId(parentFormId);\n        if (!clone.IsFormPresent(miFormId))\n        {\n            clone.AddFormObject(miFormId, true);\n        }\n\n        var firstRow = new RowObject();\n        firstRow.RowAction = RowAction.Add;\n        firstRow.ParentRowId = parentRowId;\n        firstRow.AddFieldObject(new FieldObject("123.45", "Test #1"));\n        clone.AddRowObject(miFormId, firstRow);\n\n        var secondRow = new RowObject();\n        secondRow.RowAction = RowAction.Add;\n        secondRow.ParentRowId = parentRowId;\n        secondRow.AddFieldObject(new FieldObject("123.45", "Test #2"));\n        clone.AddRowObject(miFormId, secondRow);\n\n        return clone.ToReturnOptionObject();\n    }\n    catch (ArgumentException ex) {\n        return clone.ToReturnOptionObject(ErrorCode.Error, ex.Message);\n    }\n}\nreturn clone.ToReturnOptionObject(ErrorCode.Error, "Could not find expected multiple-iteration form.");\n')))}p.isMDXComponent=!0},5848:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/MultipleIterationTables-cb1c817abe00c476279f37cfbf1f171b.png"}}]);