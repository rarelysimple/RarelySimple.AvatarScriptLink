"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3167],{3081:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"announcing-avatarscriptlink.net-1.2.0","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.2.0","source":"@site/blog/2023-06-25-announcing-avatarscriptlink.net-1.2.0/index.mdx","title":"Announcing AvatarScriptLink.NET 1.2.0","description":"AvatarScriptLink.NET version 1.2.0 is now available on NuGet.","date":"2023-06-25T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.79,"hasTruncateMarker":true,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.2.0","title":"Announcing AvatarScriptLink.NET 1.2.0","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"nextItem":{"title":"Announcing AvatarScriptLink.NET 1.1.10","permalink":"/blog/announcing-avatarscriptlink.net-1.1.10"}},"content":"AvatarScriptLink.NET version 1.2.0 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.2.0).\\nThis release includes the introduction of Builder methods to assist with the creation of the various objects as well as allowing for the [error code and error message to be set prior to calling `ToReturnOptionObject()`](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/52).\\nThis is especially helpful when arranging unit tests.\\n\\n{/* truncate */}\\n\\n## New Builders\\n\\nBuilder methods have been added to each of the ScriptLink objects.\\n\\n* [OptionObject2015 (incl. OptionObject2, OptionObject)](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/40)\\n* [FormObject](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/39)\\n* [RowObject](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/38)\\n* [FieldObject](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/37)\\n\\n```cs\\n[TestMethod]\\npublic void TestMethod1WithFluentBuilder()\\n{\\n    var expected = \\"value\\";\\n    FieldObject fieldObject = FieldObject.Builder()\\n        .FieldNumber(\\"123.45\\").FieldValue(expected)\\n        .Enabled()\\n        .Build();\\n    Assert.AreEqual(expected, fieldObject.FieldValue);\\n}\\n```\\n\\n## Preset ErrorCode and ErrorMesg\\n\\nTThere may be use cases in which you do not want to wait until the returning of the response to set the ErrorCode and ErrorMesg.\\nWith this release you can set these values prior to calling `ToReturnOptionObject()`.\\n\\n```cs\\nif (condition)\\n{\\n    optionObject.ErrorCode = ErrorCode.Alert;\\n    optionObject.ErrorMesg = \\"An alert message!\\";\\n}\\nreturn optionObject.ToReturnOptionObject();\\n```"},{"id":"announcing-avatarscriptlink.net-1.1.10","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.1.10","source":"@site/blog/2022-10-15-announcing-avatarscriptlink.net-1.1.10/index.mdx","title":"Announcing AvatarScriptLink.NET 1.1.10","description":"AvatarScriptLink.NET version 1.1.10 is now available on NuGet.","date":"2022-10-15T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.1.10","title":"Announcing AvatarScriptLink.NET 1.1.10","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.2.0","permalink":"/blog/announcing-avatarscriptlink.net-1.2.0"},"nextItem":{"title":"Announcing AvatarScriptLink.NET 1.1.6","permalink":"/blog/announcing-avatarscriptlink.net-1.1.6"}},"content":"AvatarScriptLink.NET version 1.1.10 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.1.10).\\nThis release corrects [a reported issue causing some using the OpenForm Error Code (6) to fail](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/22)."},{"id":"announcing-avatarscriptlink.net-1.1.6","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.1.6","source":"@site/blog/2022-09-04-announcing-avatarscriptlink.net-1.1.6/index.mdx","title":"Announcing AvatarScriptLink.NET 1.1.6","description":"AvatarScriptLink.NET version 1.1.6 is now available on NuGet.","date":"2022-09-04T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":1.075,"hasTruncateMarker":true,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.1.6","title":"Announcing AvatarScriptLink.NET 1.1.6","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.1.10","permalink":"/blog/announcing-avatarscriptlink.net-1.1.10"},"nextItem":{"title":"Announcing AvatarScriptLink.NET 1.0.28","permalink":"/blog/announcing-avatarscriptlink.net-1.0.28"}},"content":"AvatarScriptLink.NET version 1.1.6 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.1.6).\\nThis release refines [the behavior of setting a FieldObject as required or optional](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/20).\\n\\nWith the release:\\n\\n* `SetRequiredField()` will no longer set the FieldObject as Enabled as well. Use `SetEnabledField()` as well if this is the desired result.\\n* `SetDisabledField()` will no longer set the FieldObject as Optional as well. Use `SetOptionalField()` well if this is the desired result.\\n\\n{/* truncate */}\\n\\n## Migrating from 1.0.x to 1.1.x\\n\\nDue to the change of behavior there could be unintended changes to the behavior of implemented ScriptLink APIs.\\nIf your implementation relies on the assumptions that \\"all required fields are enabled\\" or \\"all disabled fields are optional\\" then you may need to apply the following updates to your project.\\n\\nFor `SetRequiredField()`, add another line to `SetEnabledField()` to ensure the FieldObject is enabled as expected.\\n\\n```cs\\n// In version 1.0 SetRequiredField would also enable the FieldObject\\noptionObject.SetRequiredField(fieldNumber);\\n// In version 1.1 and later this must must explicitly requested.\\n// highlight-next-line\\noptionObject.SetEnabledField(fieldNumber);\\n```\\n\\nFor `SetDisabledField()`, add another line to `SetOptionalField()` to ensure the FieldObject is set to optional as expected.\\n\\n```cs\\n// In version 1.0 SetDisabledField would also set the FieldObject as optional (not required)\\noptionObject.SetDisabledField(fieldNumber);\\n// In version 1.1 and later this must must explicitly requested.\\n// highlight-next-line\\noptionObject.SetOptionalField(fieldNumber);\\n```"},{"id":"announcing-avatarscriptlink.net-1.0.28","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.0.28","source":"@site/blog/2022-07-25-announcing-avatarscriptlink.net-1.0.28/index.mdx","title":"Announcing AvatarScriptLink.NET 1.0.28","description":"AvatarScriptLink.NET version 1.0.28 is now available on NuGet.","date":"2022-07-25T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.16,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.0.28","title":"Announcing AvatarScriptLink.NET 1.0.28","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.1.6","permalink":"/blog/announcing-avatarscriptlink.net-1.1.6"},"nextItem":{"title":"Announcing AvatarScriptLink.NET 1.0.25","permalink":"/blog/announcing-avatarscriptlink.net-1.0.25"}},"content":"AvatarScriptLink.NET version 1.0.28 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.0.28).\\nThis release addresses security vulnerabilities identified in Newtonsoft.Json and includes miscellaneous updates to other project dependencies.\\n\\nSecurity vulnerabilities addressed include:\\n\\n* [CVE-2020-11022](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/8)\\n* [CVE-2020-11023](https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/issues/9)"},{"id":"announcing-avatarscriptlink.net-1.0.25","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.0.25","source":"@site/blog/2022-05-20-announcing-avatarscriptlink.net-1.0.25/index.mdx","title":"Announcing AvatarScriptLink.NET 1.0.25","description":"AvatarScriptLink.NET version 1.0.25 is now available on NuGet.","date":"2022-05-20T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.0.25","title":"Announcing AvatarScriptLink.NET 1.0.25","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.0.28","permalink":"/blog/announcing-avatarscriptlink.net-1.0.28"},"nextItem":{"title":"Announcing AvatarScriptLink.NET 1.0.22","permalink":"/blog/announcing-avatarscriptlink.net-1.0.22"}},"content":"AvatarScriptLink.NET version 1.0.25 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.0.25).\\nThis is a maintenance release which includes updates to miscellaneous project dependencies.\\n\\nWith this update, [Nuget now displays a README tab in its package directory](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink) for `RarelySimple.AvatarScriptLink`."},{"id":"announcing-avatarscriptlink.net-1.0.22","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.0.22","source":"@site/blog/2021-08-08-announcing-avatarscriptlink.net-1.0.22/index.mdx","title":"Announcing AvatarScriptLink.NET 1.0.22","description":"AvatarScriptLink.NET version 1.0.22 is now available on NuGet.","date":"2021-08-08T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.2,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.0.22","title":"Announcing AvatarScriptLink.NET 1.0.22","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.0.25","permalink":"/blog/announcing-avatarscriptlink.net-1.0.25"},"nextItem":{"title":"Announcing AvatarScriptLink.NET 1.0.7","permalink":"/blog/announcing-avatarscriptlink.net-1.0.7"}},"content":"AvatarScriptLink.NET version 1.0.22 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.0.22).\\nThis is a maintenance release which includes the following updates:\\n\\n* Addresses security vulnerabilities from various project dependencies.\\n* Converting OptionObject content to HTML has been improved.\\n* Miscellaneous code quality improvements."},{"id":"announcing-avatarscriptlink.net-1.0.7","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.0.7","source":"@site/blog/2020-12-12-announcing-avatarscriptlink.net-1.0.7/index.mdx","title":"Announcing AvatarScriptLink.NET 1.0.7","description":"AvatarScriptLink.NET version 1.0.7 is now available on NuGet.","date":"2020-12-12T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.17,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.0.7","title":"Announcing AvatarScriptLink.NET 1.0.7","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.0.22","permalink":"/blog/announcing-avatarscriptlink.net-1.0.22"},"nextItem":{"title":"Announcing AvatarScriptLink.NET 1.0.6","permalink":"/blog/announcing-avatarscriptlink.net-1.0.6"}},"content":"AvatarScriptLink.NET version 1.0.7 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.0.7).\\nThis release corrects an issue that may occur when the myAvatar Registry Setting `Include FormObject for sections without a current row selected` is set to `Y`."},{"id":"announcing-avatarscriptlink.net-1.0.6","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-1.0.6","source":"@site/blog/2020-06-09-announcing-avatarscriptlink.net-1.0.6/index.mdx","title":"Announcing AvatarScriptLink.NET 1.0.6","description":"AvatarScriptLink.NET version 1.0.6 is now available on NuGet.","date":"2020-06-09T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"},{"inline":true,"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.105,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-1.0.6","title":"Announcing AvatarScriptLink.NET 1.0.6","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio","nuget"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.0.7","permalink":"/blog/announcing-avatarscriptlink.net-1.0.7"},"nextItem":{"title":"Deployment Methods for Your .NET ScriptLink Solution","permalink":"/blog/deployment-methods-for-your-dotnet-scriptlink-solution"}},"content":"AvatarScriptLink.NET version 1.0.6 is [now available on NuGet](https://www.nuget.org/packages/RarelySimple.AvatarScriptLink/1.0.6).\\nThis is a maintenance release with a number of minor fixes and enhancements."},{"id":"deployment-methods-for-your-dotnet-scriptlink-solution","metadata":{"permalink":"/blog/deployment-methods-for-your-dotnet-scriptlink-solution","source":"@site/blog/2020-03-31-deployment-methods-for-your-dotnet-scriptlink-solution/index.mdx","title":"Deployment Methods for Your .NET ScriptLink Solution","description":"Congratulations! You have created your \u201cHello, World!\u201d ScriptLink web application, tested it with Unit Tests, tested it on your development web server, and submitted your code to a source control solution. Next, we will be looking at various methods for deploying our .NET ScriptLink applications. This will enable us to setup our Test server to use with UAT or other myAvatar Test environment and later the Production server to use with our LIVE or other production myAvatar environment.","date":"2020-03-31T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"web deploy","permalink":"/blog/tags/web-deploy"},{"inline":true,"label":"asp.net","permalink":"/blog/tags/asp-net"},{"inline":true,"label":"azure devops","permalink":"/blog/tags/azure-devops"},{"inline":true,"label":"azure pipelines","permalink":"/blog/tags/azure-pipelines"}],"readingTime":3.31,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"deployment-methods-for-your-dotnet-scriptlink-solution","title":"Deployment Methods for Your .NET ScriptLink Solution","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","deployment","web deploy","asp.net","azure devops","azure pipelines"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET 1.0.6","permalink":"/blog/announcing-avatarscriptlink.net-1.0.6"},"nextItem":{"title":"Announcing AvatarScriptLink.NET General Availability","permalink":"/blog/announcing-avatarscriptlink.net-general-availability"}},"content":"Congratulations! You have created your \u201cHello, World!\u201d ScriptLink web application, tested it with Unit Tests, tested it on your development web server, and submitted your code to a source control solution. Next, we will be looking at various methods for deploying our .NET ScriptLink applications. This will enable us to setup our Test server to use with UAT or other myAvatar Test environment and later the Production server to use with our LIVE or other production myAvatar environment.\\n\\nAs a review, what I described above is a basic workflow for the testing of your changes to the ScriptLink solution. Testing should be as thorough as possible and in general you should not move to the next stage of testing until all tests have passed in the current.\\n\\n1. Test your code changes with Unit Tests.\\n2. Test your code changes with your development web server. (e.g., Visual Studio debugger (F5))\\n3. Test your code changes with your Test web server connected to your test myAvatar environment.\\n4. Release to production according to your change management protocols.\\n5. Deployment of our project to the web server is basically moving files. However, the more mature options include features to automate selection of the files, the moving of the files, restarting the web app, and other various tasks. Let\u2019s take a look at these options.\\n\\n## Option #1: Create a Package\\nThis is the closest to more traditional deployments. In this method, you create a zip file with all of the required files to import into IIS. I have had to use this method when the web host didn\u2019t allow the subsequent methods I will discuss or the host limits access to the web application except from the myAvatar server.\\n\\n## Option #2: Web Deploy\\nThis has been my go to solution for many years and [the Microsoft documentation on ASP.NET deployment](https://docs.microsoft.com/en-us/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/) leverages this method. This is significantly better than the previous option, but not the best. It balances ease of use and complexity. It is also well established.\\n\\nAnother benefit of this option is that the developer or the one who deploys does not require any administrative rights on the web server itself. This means that you can separate out those duties between your server admin and your application developer.\\n\\nHere\'s an overview of this workflow.\\n\\n1. Right-click on your web application project in Visual Studio and select Publish\u2026\\n2. Select the Test environment to deploy to.\\n3. Select Publish.\\n4. Once published, the web app will be launched.\\n5. Once testing in UAT is complete, repeat for the Production environment.\\n\\nHere is a demonstration of Web Deploy from 2018 used with Azure.\\n\\n![](https://youtu.be/6VK370-Yk3A)\\n\\nI will walk through setting this up in more detail in a future article.\\n\\n## Option #3: Azure Pipelines\\n\\nThis is an ideal option whether you are hosting your ScriptLink application on-premise or in the Netsmart cloud. However, this is a relatively new solution offering from Microsoft. It uses Continuous Integration and Continuous Deployment (CI/CD) processes to help you build a healthier release process. I especially like that you can deploy your Test or Production code to on-premises servers (yes plural) automatically and without opening your firewall. Any on premises IIS server can get the release as long as it has Internet access.\\n\\nHere\u2019s an overview of the workflow.\\n\\n1. Make sure all changes have been committed and pushed to the remote repository.\\n2. Create a release.\\n3. Your code is built and tests run automatically.\\n4. If your tests pass, the code is deployed to your test server(s).\\n5. Once testing in UAT is complete, initiate deployment to production server(s).\\n\\nAzure DevOps published a great demonstration on this last year.\\n\\n![](https://youtu.be/_sUf0wqJYXo)\\n\\n## Let\'s Deploy\\n\\nHopefully, these options peak your interest and you are interested in modernizing your deployment strategy. In Visual Studio 2019, right-click Publish can still be used to create a package to transfer and import, however I think you will really like Web Deploy or Azure Pipelines."},{"id":"announcing-avatarscriptlink.net-general-availability","metadata":{"permalink":"/blog/announcing-avatarscriptlink.net-general-availability","source":"@site/blog/2020-02-21-announcing-avatarscriptlink.net-general-availability/index.mdx","title":"Announcing AvatarScriptLink.NET General Availability","description":"Placeholder for general availability announcement.","date":"2020-02-21T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"}],"readingTime":0.025,"hasTruncateMarker":false,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"announcing-avatarscriptlink.net-general-availability","title":"Announcing AvatarScriptLink.NET General Availability","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio"]},"unlisted":false,"prevItem":{"title":"Deployment Methods for Your .NET ScriptLink Solution","permalink":"/blog/deployment-methods-for-your-dotnet-scriptlink-solution"},"nextItem":{"title":"Testing Your ScriptLink API with SoapUI","permalink":"/blog/testing-your-scriptlink-api-with-soapui"}},"content":"Placeholder for general availability announcement."},{"id":"testing-your-scriptlink-api-with-soapui","metadata":{"permalink":"/blog/testing-your-scriptlink-api-with-soapui","source":"@site/blog/2020-02-18-testing-your-scriptlink-api-with-soapui/index.mdx","title":"Testing Your ScriptLink API with SoapUI","description":"Welcome back to my series on getting started with myAvatar ScriptLink.","date":"2020-02-18T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"vb","permalink":"/blog/tags/vb"},{"inline":true,"label":"visual basic","permalink":"/blog/tags/visual-basic"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"}],"readingTime":4.6,"hasTruncateMarker":true,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"testing-your-scriptlink-api-with-soapui","title":"Testing Your ScriptLink API with SoapUI","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","vb","visual basic","visual studio"]},"unlisted":false,"prevItem":{"title":"Announcing AvatarScriptLink.NET General Availability","permalink":"/blog/announcing-avatarscriptlink.net-general-availability"},"nextItem":{"title":"Creating Your First myAvatar ScriptLink API Using C#","permalink":"/blog/creating-your-first-myavatar-scriptlink-api-using-c-sharp"}},"content":"Welcome back to my series on getting started with myAvatar ScriptLink.\\nToday, we are looking at testing.\\nAs tempting as it may be, we should not wait to test our ScriptLink APIs until they are available in production.\\nWe want to test our code before it impacts the users.\\nIn our first test, we will set up SoapUI to send a request to our development environment and verify the response.\\n\\nWhen we left off, we had [created our first Hello World ScriptLink API in .NET using C#](/blog/creating-your-first-myavatar-scriptlink-api-using-c-sharp) and Visual Basic.\\nIf we created them correctly, the we should be able to call the RunScript method with the HelloWorld parameter and receive an Error Code 3 with the ErrorMsg \\"Hello, World!\'.\\nLet\u2019s test that.\\n\\n{/* truncate */}\\n\\n## What You Will Need\\n\\nTo complete this walkthrough, you will need the following:\\n\\n1. [Visual Studio Community 2019](https://visualstudio.microsoft.com/)\\n2. The Hello World solution we set up previously.<br />I will be using the C# solution for my examples, but the process is the same for the Visual Basic solution.\\n3. [SoapUI](https://www.soapui.org/)\\n\\nVisual Studio Community 2019 and SoapUI are free to download and use. Paid versions will add additional features that we will not use in this walkthrough.\\n\\nIf you don\u2019t have your Hello World API setup yet, go back to my [previous article](/blog/creating-your-first-myavatar-scriptlink-api-using-c-sharp) to set it up.\\n\\n## Start Your Web Application\\n\\nOur first step is to open our solution in Visual Studio and run it.\\n\\n1. Launch **Visual Studio 2019**.\\n2. **Open our ScriptLink demo solution**. For me, it is RS.ScriptLinkDemo.\\n3. Press **F5** to begin debugging the solution.\\n4. You may receive a security alert like this. This means that the browser does not trust the SSL certificate provided by Visual Studio. Go ahead and proceed.\\n\\n![Untrusted Visual Studio SSL Certificate Shown in Mozilla Firefox 70](./visual-studio-2019-untrusted-ssl-certificate.webp)\\n\\n5. If you see the default homepage of our web application like this, then you will need to enter the path to the ScriptLinkController.\\n\\n![Web Application Homepage Forbidden](./visual-studio-2019-site-homepage-forbidden.webp)\\n\\n6. Once you are at your ScriptLinkController API you should see a screen like this.\\n\\n![ScriptLinkController Debugging in Mozilla Firefox 70](./visual-studio-2019-soap-api.webp)\\n\\n7. Confirm and copy the URL of your WSDL. Mine is: http://localhost:####/api/v3/ScriptLinkController.asmx?WSDL\\n\\n![The content of the ScriptLink WSDL displayed in Mozilla Firefox 70](./visual-studio-2019-soap-api-wsdl.webp)\\n\\n## Import WSDL into SoapUI\\n\\nNext, we will launch SoapUI and import our WSDL into a new test project.\\n\\n1. Launch **SoapUI**.\\n2. Select **SOAP** in the Task bar to create a new SOAP Project.\\n3. **Paste the WSDL URL** into the *Initial WSDL* field.\\n4. Optional: Customize the Project name.\\n5. Select **OK**.\\n\\n![Creating a new SOAP Project in SoapUI](./soapui-new-soap-project.png)\\n\\nYou should now have a SOAP project that looks something like this.\\n\\n![SoapUI showing new ScriptLink SOAP Project](./soapui-scriptlink-soap-project.webp)\\n\\nOk. Let\u2019s run some tests.\\n\\n## Testing the API\\n\\nFor our first test, we are going to see what happens when we submit the default test.\\n\\n### Test #1: GetVersion\\n\\nOur first test will be relatively straightforward. We want to get our GetVersion string back. When we created the SOAP project, SoapUI created default requests for us.\\n\\n1. **Expand GetVersion.**<br />You can use either interface. However, I will be using the one that does not end in \\"12\\".\\n2. **Double-click on Request 1** to open it.\\n3. You should now see the default XML request displayed and ready for submission.\\n\\n![ScriptLink GetVersion Request in SoapUI](./soapui-scriptlink-soap-getversion-request.webp)\\n\\n4. Select the **Play** icon (Alt+Enter) to submit request.\\n5. You should have received and XML response.\\n\\n![ScriptLink GetVersion Response in SoapUI](./soapui-scriptlink-soap-getversion-response.webp)\\n\\nIf the test was successful, then you should see the version number you set previously displayed in the GetVersionResult tag. If not, make sure your web application is still running.\\n\\n## Test #2: Submitting Default OptionObject\\n\\nOk. Now for the real test.\\n\\n1. **Expand the RunScript node**.\\n2. **Right-click on Request 1** and select **Rename**.\\n3. Name the request *Default Request* and select **OK**.\\n\\n![Renamed Request in SoapUI](./soapui-scriptlink-soap-runscript-default-request.webp)\\n\\n4. Double-click on the Default Request to open it.\\n5. You should now have a default OptionObject2015 on the left and an empty result view on the right.\\n\\n![ScriptLink RunScript Request shown in SoapUI](./soapui-scriptlink-soap-runscript-request.webp)\\n\\n6. Select the **Play** icon (Alt+Enter) to submit the request.\\n7. You should get a result like this.\\n\\n![ScriptLink RunScript Error Response shown in SoapUI](./soapui-scriptlink-soap-runscript-response-error.webp)\\n\\nSo what happened? Three things happened. The submitted OptionObject2015 included the following invalid values:\\n\\n* A `?` in EpisodeNumber.\\n* A `?` in ErrorCode.\\n* A `?` in MultipleIteration value.\\n\\nTo fix this:\\n\\n1. Set the EpisodeNumber to 0.\\n2. Remove the ErrorCode and ErrorMesg tags. These are not relevant on submission anyway.\\n3. Set the MultipleIteration value to 0.\\n\\n## Test #3: The Modified Default OptionObject\\n\\nWith the modifications in place your OptionObject request should look something like this.\\n\\n![Corrected ScriptLink Default RunScript Request in SoapUI](./soapui-scriptlink-soap-runscript-request-fixed.webp)\\n\\nNow when we run the test we should get an OptionObject2015 back. Did you?\\n\\n![ScriptLink RunScript Hello World Response in SoapUI](./soapui-scriptlink-soap-runscript-response-fixed.png)\\n\\nIf successful, you should see the ErrorCode \\"3\\" and ErrorMesg \\"Hello, World!\\" in the response XML.\\n\\n## Save Your SoapUI Test Project\\n\\nTo help with future testing, let\u2019s save our SoapUI test project. This should eliminate the need to import the WSDL again, unless we change ports.\\n\\n1. Select **File->Save All Projects**.\\n2. You should receive a prompt indicating that the project has not been saved.\\n3. Select **Yes** to save the project.\\n4. Select a location for the project file and select **Save**.\\n\\n## Happy Testing\\n\\nThere you go. You are all set to set testing your ScriptLink APIs with SoapUI. Enjoy!"},{"id":"creating-your-first-myavatar-scriptlink-api-using-c-sharp","metadata":{"permalink":"/blog/creating-your-first-myavatar-scriptlink-api-using-c-sharp","source":"@site/blog/2020-02-04-creating-your-first-myavatar-scriptlink-api-using-c-sharp/index.mdx","title":"Creating Your First myAvatar ScriptLink API Using C#","description":"This post was originally published on the RarelySimple Blog. It has been republished here to be with other ScriptLink-related content.","date":"2020-02-04T00:00:00.000Z","tags":[{"inline":true,"label":"scriptlink","permalink":"/blog/tags/scriptlink"},{"inline":true,"label":"myavatar","permalink":"/blog/tags/myavatar"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"c#","permalink":"/blog/tags/c"},{"inline":true,"label":"visual studio","permalink":"/blog/tags/visual-studio"}],"readingTime":11.41,"hasTruncateMarker":true,"authors":[{"name":"Scott Olson Jr","title":"RarelySimple.AvatarScriptLink Maintainer","url":"https://github.com/scottolsonjr","imageURL":"https://avatars.githubusercontent.com/u/984715?v=4","key":"scottolsonjr"}],"frontMatter":{"slug":"creating-your-first-myavatar-scriptlink-api-using-c-sharp","title":"Creating Your First myAvatar ScriptLink API Using C#","authors":["scottolsonjr"],"tags":["scriptlink","myavatar","dotnet","c#","visual studio"]},"unlisted":false,"prevItem":{"title":"Testing Your ScriptLink API with SoapUI","permalink":"/blog/testing-your-scriptlink-api-with-soapui"}},"content":":::info\\nThis post was originally published on the RarelySimple Blog. It has been republished here to be with other ScriptLink-related content.\\n:::\\n\\nMost of my IT career has involved the implementation, maintenance, and configuration of electronic health record (EHR) solutions in the behavioral health space.\\nMuch of this work has been the usual suspects of security, report writing, end user support, and process design.\\nHowever, it has also involved a healthy dose of extending the EHR to add additional features and capabilities.\\nThe Netsmart myAvatar EHR solution includes a variety of options for extending the solution.\\n\\nIn this series of articles, we will be looking at the myAvatar ScriptLink feature.\\nScriptLink is a feature that enables a form in myAvatar to connect to a separate web application (consume a SOAP API) to interact with the form or trigger additional processes, such as sending an email.\\nA common example of how to use ScriptLink is to score a clinical outcomes tool and provide a prompt.\\n\\n{/* truncate */}\\n\\nFor example, a clinician completes a general Assessment and upon filing, ScriptLink calls the API which evaluates the responses and determines based on the results that the client may be at risk of death by suicide so a Suicide Risk Assessment is recommended and give the option to open that form at that moment.\\nScriptLink could then extend the functionality of the Suicide Risk Assessment to trigger notifications or create a Chart Alert based on the responses.\\n\\nTo leverage the ScriptLink feature in your environment you will need access to a developer or development team that can create the web application and API.\\nYou will also need to host the solution in your server room, data center, or in Netsmart\u2019s cloud hosting.\\n\\nThis series is written for the developer who may new to ScriptLink or even development.\\nThe goal is to help you get started.\\nMuch of the series will look at development in .NET using C# and hosting using Windows Server and IIS.\\nHowever, this will not be exclusively so.\\nI intend to explore some other frameworks, languages, and hosting solutions in this series and the future as well.\\n\\n## What You Will Need\\n\\nBefore we begin you will need the following.\\n\\n* [Visual Studio 2019](https://visualstudio.microsoft.com/vs/)<br />Community edition is free and will work fine for this series.\\n\\n## Create a Class Library\\n\\n:::tip\\nYou can skip a number of these steps by using the AvatarScriptLink.NET library instead. It is available for free on NuGet and simplifies ScriptLink API development. [Learn more](/docs/dotnet/intro).\\n:::\\n\\nThe first thing we will do is create a .NET Standard Class Library to define the OptionObject that we will receive from myAvatar.\\nWe will simplify and enhance this by using a NuGet package in the future.\\nHowever, this will help to familiarize you with the OptionObject definition.\\n\\n1. Launch **Visual Studio 2019** and select **Create a new project**.\\n\\n![The Visual Studio 2019 Launcher](./visual-studio-2019-start-screen.png)\\n\\n2. Set the Language filter to **C#**.\\n3. Optional:\\n    1. Set the Project Type filter to **Library** or\\n    2. Search for **Class Library**.\\n4. Select the **Class Library (.NET Standard)** Project and select **Next**.\\n\\n![Create a new project template selector in Visual Studio 2019](./visual-studio-2019-create-csharp-library.png)\\n\\n5. **Name the Project**. I am going to use RS.ScriptLinkDemo.Objects.\\n6. Optional: Change the Location.\\n7. **Name the Solution**. I am going to use RS.ScriptLinkDemo.\\n8. Uncheck Place solution and project in the same directory.\\n9. Select **Create**.\\n\\n![Configuring the new Class Library project in Visual Studio](visual-studio-2019-create-scriptlink-demo-library.png)\\n\\n10. Visual Studio will now scaffold your project. When complete, you should see your solution and project with a sample class (Class1) open for editing.\\n\\n## Create the Object Classes\\n\\nNow that we have our Class Library project we will create our classes to define an OptionObject2015. Let\u2019s go ahead and delete the default Class1.cs file that was created for us. You can also rename it if you like to use it for one of the upcoming classes.\\n\\n### The FieldObject\\n\\nThe FieldObject holds the content and metadata about a field located in myAvatar.\\n\\n1. Right-click on your project and select **Add->Class\u2026**\\n2. Name the class **FieldObject.cs** and select **Add**.\\n3. You should now have a FieldObject class open and ready to define.\\n4. **Set the class as public** and add the following properties.\\n\\n```cs\\npublic class FieldObject\\n{\\n    public string Enabled { get; set; }\\n    public string FieldNumber { get; set; }\\n    public string FieldValue { get; set; }\\n    public string Lock { get; set; }\\n    public string Required { get; set; }\\n}\\n```\\n\\n5. Optional: Right-click and select **Remove and Sort Usings**.\\n6. **Save** changes.\\n\\n### The RowObject\\n\\nThe RowObject defines a row on a myAvatar form. This includes a List of FieldObjects and some metadata about the row. The row is most prominent in myAvatar when using multiple iteration tables.\\n\\n1. Right-click on your project and select **Add->Class\u2026**\\n2. Name the class **RowObject.cs** and select **Add**.\\n3. You should now have a RowObject class open and ready to define.\\n4. **Set the class as public** and add the following properties.\\n\\n```cs\\npublic class RowObject\\n{\\n    public List<FieldObject> Fields { get; set; }\\n    public string ParentRowId { get; set; }\\n    public string RowAction { get; set; }\\n    public string RowId { get; set; }\\n}\\n```\\n\\n5. Optional: Right-click and select **Remove and Sort Usings**.\\n6. **Save** changes.\\n\\n### The FormObject\\n\\nThe name of the FormObject dates back to before myAvatar was released. A FormObject represents a section of a myAvatar Form. In myAvatar Form Sections are list in the top-left below the tabs and above the controls. Each FormObject (\\"section\\") will contain at least 1 RowObject. The first/principal FormObject will only contain 1 RowObject.\\n\\n1. Right-click on your project and select **Add->Class\u2026**\\n2. Name the class **RowObject.cs** and select **Add**.\\n3. You should now have a RowObject class open and ready to define.\\n4. **Set the class as public** and add the following properties.\\n\\n```cs\\npublic class FormObject\\n{\\n    public RowObject CurrentRow { get; set; }\\n    public string FormId { get; set; }\\n    public bool MultipleIteration { get; set; }\\n    public List<RowObject> OtherRows { get; set; }\\n}\\n```\\n\\n5. Optional: Right-click and select **Remove and Sort Usings**.\\n6. **Save** changes.\\n\\n### The OptionObject\\n\\nThere are currently three different versions of the OptionObject: OptionObject (legacy), OptionObject2 (legacy), and OptionObject2015 (current). We will use OptionObject2015 as it is the current version and is required if you will use ScriptLink with Avatar Web Services. The OptionObject represents the myAvatar Form.\\n\\n1. Right-click on your project and select **Add->Class\u2026**\\n2. Name the class **RowObject.cs** and select **Add**.\\n3. You should now have a RowObject class open and ready to define.\\n4. **Set the class as public** and add the following properties.\\n\\n```cs\\npublic class OptionObject2015\\n{\\n    public string EntityID { get; set; }\\n    public double EpisodeNumber { get; set; }\\n    public double ErrorCode { get; set; }\\n    public string ErrorMesg { get; set; }\\n    public string Facility { get; set; }\\n    public List<FormObject> Forms { get; set; }\\n    public string NamespaceName { get; set; }\\n    public string OptionId { get; set; }\\n    public string OptionStaffId { get; set; }\\n    public string OptionUserId { get; set; }\\n    public string ParentNamespace { get; set; }\\n    public string ServerName { get; set; }\\n    public string SystemCode { get; set; }\\n    public string SessionToken { get; set; }\\n}\\n```\\n\\n5. Optional: Right-click and select **Remove and Sort Usings**.\\n6. **Save** changes.\\n\\n![Solution with completed class library](./visual-studio-2019-scriptlink-demo-library.webp)\\n\\n## Create Web Application Project\\n\\nThe .NET SOAP Web Services we\u2019re not ported to .NET Core, so we will create our web application with .NET Framework.\\n\\n1. Right-click on your solution and select **Add->New Project\u2026**\\n2. Set the Project Type filter to Web and search for **Web Application**.\\n3. Select the **ASP.NET Web Application (.NET Framework)** and select **Next**.\\n\\n![Selecting the ASP.NET Web Application (.NET Framework) project template](./visual-studio-2019-create-dotnet-framework-web-app.png)\\n\\n4. **Name the project**. I will be using RS.ScriptLinkDemo.Soap.\\n5. Set the **Framework to the latest version available**. I will be using 4.8, however this walkthrough should work with versions as early as 4.6.2.\\n6. Select **Create**.\\n\\n![Configuring the ASP.NET Web Application](./visual-studio-2019-configure-dotnet-framework-web-app.png)\\n\\n7. Select the **Empty** project template and confirm the **Configure for HTTPS** is checked.\\n8. Note: When you setup your project that you will use in production, I recommend the following:\\n    1. Using Web Forms or MVC to add supporting documentation and links.\\n    2. Adding Authentication in case you want to controls or reporting to this web application.\\n    3. Selecting Also create a project for unit tests. More on this in a future article.\\n9. Select **Create**.\\n\\n![ASP.NET Web Application feature selection](./visual-studio-2019-create-empty-web-app.png)\\n\\n10. Visual Studio will now scaffold your web application.\\n11. When complete, you will see and Overview page and links for additional learning. Go ahead and close this page. You can get back to it in the future by right-clicking on your web application project and selecting Overview.\\n\\nWe now have our web application. Next, we need to reference our class library and create our web service.\\n\\n## Reference our Class Library\\n\\n:::tip\\nPlease note that you may have issues with this if you selected incompatible project versions. For this walkthrough, the Class Library should be using .NET Standard 2.0 and the web application should be using .NET Framework 4.6.1 or later. [The recommendation is 4.7.2 or later](https://docs.microsoft.com/en-us/dotnet/standard/net-standard).\\n:::\\n\\n1. In the web application project, right-click on References and select **Add Reference\u2026**\\n\\n![The Reference Manager in Visual Studio](./visual-studio-2019-add-reference.png)\\n\\n2. Check the box next to your Class Library and select **OK**.\\n3. If you see a yellow triangle appear on it in the references list, make sure you have the correct .NET versions selected for each project.\\n\\n## Create Web Service\\n\\nSince there are multiple versions of the OptionObject, I have established an organizational pattern to support backward and forward compatibility. We will use it in this example. You do not have to use it in your projects.\\n\\n1. Right-click on your web application project and select **Add->New Folder**.\\n2. Name the folder *api*.\\n3. Right-click on the api folder and select **Add->New Folder**.\\n4. Name this folder *v3*.<br />This is because OptionObject2015 is the third version of the OptionObject.\\n6. Right-click on the v3 folder and select **Add->New Item\u2026**\\n7. Name the web service. I will be using *ScriptLinkController.asmx*.\\n\\n![Add new C# Web Service item in Visual Studio](./visual-studio-2019-add-web-service.png)\\n\\n7. Select **Add**.\\n\\n![The new web service in Visual Studio](./visual-studio-2019-scriptlink-api-added.webp)\\n\\n8. You should now have a ScriptLinkController class open and ready for editing.\\n\\n## Configure Our Web Service\\n\\nNetsmart has defined two methods that our web service will provide: GetVersion and RunScript. We will replace the default method with these two methods then configure RunScript to return the usual \\"Hello World!\\" string.\\n\\n### Define the Methods\\n\\n1. Add the using reference to your Class Library.\\n\\n```cs\\n// Here is the reference to my class library\\nusing RS.ScriptLinkDemo.Objects;\\n```\\n\\n2. Replace the HelloWorld web method with the following methods:\\n\\n```cs\\n[WebMethod]\\npublic string GetVersion()\\n{\\n    throw new NotImplementedException();\\n}\\n \\n[WebMethod]\\npublic OptionObject2015 RunScript(OptionObject2015 optionObject2015, string parameter)\\n{\\n    throw new NotImplementedException();\\n}\\n```\\n\\nNow we have to the two supported methods for ScriptLink and the RunScript is configured to receive and return an OptionObject2015.\\n\\n## Write the Return Code\\n\\n### GetVersion\\n\\nThe GetVersion method is straightforward. We just return a version number however we prefer (\u201cv0.01\u201d, \u201cversion 3\u201d, \u201c1.01.01\u201d) as long as it is a string.\\n\\n```cs\\n[WebMethod]\\npublic string GetVersion()\\n{\\n    return \\"v.0.0.1\\";\\n}\\n```\\n\\n### RunScript\\n\\nThe RunScript method is different. We are required to return the OptionObject with only the FormObjects that have RowObjects to Add, Edit, and/or Delete. Additionally each RowObject should only contain the FieldObjects that are to be added or modified. This means we cannot simply return the OptionObject as we received it. We must prepare it for return and return it.\\n\\n```cs\\n[WebMethod]\\npublic OptionObject2015 RunScript(OptionObject2015 optionObject2015, string parameter)\\n{\\n    OptionObject2015 returnOptionObject = new OptionObject2015()\\n    {\\n        EntityID = optionObject2015.EntityID,\\n        EpisodeNumber = optionObject2015.EpisodeNumber,\\n        ErrorCode = 3,\\n        ErrorMesg = \\"Hello, World!\\",\\n        Facility = optionObject2015.Facility,\\n        NamespaceName = optionObject2015.NamespaceName,\\n        OptionId = optionObject2015.OptionId,\\n        OptionStaffId = optionObject2015.OptionStaffId,\\n        OptionUserId = optionObject2015.OptionUserId,\\n        ParentNamespace = optionObject2015.ParentNamespace,\\n        ServerName = optionObject2015.ServerName,\\n        SystemCode = optionObject2015.SystemCode,\\n        SessionToken = optionObject2015.SessionToken\\n    };\\n \\n    return returnOptionObject;\\n}\\n```\\n\\nWhat we have now is a SOAP API the will return a version number string (GetVersion method) and an OptionObject with an information message that reads, \\"Hello, World!\\"\\n\\n## Run the API\\n\\nIf all is well we should be able compile and run our solution.\\n\\n1. Press F5 to begin debugging with your default browser.\\n2. We should see our API launched in our default web browser.\\n\\n![The ScriptLinkController API debugging in Microsoft Edge v.44](./visual-studio-2019-debug-soap-api.webp)\\n\\nWhen you see this page, you can get the URL for your WSDL for testing by selecting **Service Definition**. I recommend using SoapUI and Postman to test your APIs. In an upcoming article I will walkthrough testing our API.\\n\\n![The content of the ScriptLink WSDL displayed in Microsoft Edge v.44](./visual-studio-2019-debug-soap-api-wsdl.webp)\\n\\n:::tip\\nPlease note that you shouldn\u2019t import this WSDL into myAvatar as it is your local development and testing environment not your staging or production environments. I will cover deployment options in future articles.\\n:::\\n\\n## You\'re All Set\\n\\nCongratulations! You just wrote your first ScriptLink API.\\n\\nIt doesn\u2019t do much yet, but you could deploy this to a web server and connect it to your Sandbox or UAT servers to see you \\"Hello, World!\\" message popup when launching a form, filing/submitting a form, exiting a field, or selecting a command button.\\n\\nIn my upcoming articles, we will cover turning this into a controller and changing behavior based on the parameter passed, testing the web service using tools like SoapUI and Postman, testing the web service with unit tests, and much more."}]}}')}}]);