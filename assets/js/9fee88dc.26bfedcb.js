"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6559],{6718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>j,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var o=n(5893),i=n(1151);const r={title:"Multiple-Iteration Tables",image:"./MultipleIterationTables.png",sidebar_position:1},d=void 0,c={id:"dotnet/advanced/multiple-iteration-tables",title:"Multiple-Iteration Tables",description:"Multiple-iteration tables are a special kind of FormObject that allow for multiple RowObjects.",source:"@site/docs/dotnet/advanced/multiple-iteration-tables.md",sourceDirName:"dotnet/advanced",slug:"/dotnet/advanced/multiple-iteration-tables",permalink:"/docs/dotnet/advanced/multiple-iteration-tables",draft:!1,unlisted:!1,editUrl:"https://github.com/rarelysimple/RarelySimple.AvatarScriptLink/tree/main/docs/docs/dotnet/advanced/multiple-iteration-tables.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Multiple-Iteration Tables",image:"./MultipleIterationTables.png",sidebar_position:1},sidebar:"dotnetSidebar",previous:{title:"Working with FieldObjects",permalink:"/docs/dotnet/guides/working-with-fieldobjects"},next:{title:"Hello World API",permalink:"/docs/dotnet/tutorials/hello-world-dotnet/"}},a={image:n(9558).Z},l=[{value:"Reading RowObjects",id:"reading-rowobjects",level:2},{value:"Adding RowObjects",id:"adding-rowobjects",level:2},{value:"Editing RowObjects",id:"editing-rowobjects",level:2},{value:"Deleting RowObjects",id:"deleting-rowobjects",level:2},{value:"Handling Exceptions",id:"handling-exceptions",level:2}];function s(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Multiple-iteration tables are a special kind of ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/formobject",children:"FormObject"})," that allow for multiple ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObjects"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"There are some constraints when working with multiple-iteration tables."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Cannot be the first ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/formobject",children:"FormObject"})," in an ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/optionobject2015",children:"OptionObject"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObjects"})," cannot share the same RowId."]}),"\n",(0,o.jsx)(t.li,{children:"The ParentRowId is to be set with the RowId assigned to the primary FormObject's CurrentRow."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"The AvatarScriptLink.NET library helps with managing these constraints by:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Throwing an exception when attempting to add additional ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObjects"})," to a non-multiple-iteration ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/formobject",children:"FormObject"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["Automatically setting the ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowaction",children:"RowAction"}),"."]}),"\n",(0,o.jsx)(t.li,{children:"Automatically assigning RowIds to prevent duplicates."}),"\n",(0,o.jsxs)(t.li,{children:["Automatically adds new ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObjects"})," to OtherRows when CurrentRow is already set."]}),"\n",(0,o.jsx)(t.li,{children:"Helping look up the ParentRowId."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"reading-rowobjects",children:"Reading RowObjects"}),"\n",(0,o.jsxs)(t.p,{children:["How we read ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObjects"})," may vary by use specific needs. For example, if you need all values from a single FieldNumber:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="Read all values of a single field"',children:'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\nList<string> values = optionObject.GetFieldValues(miFormId);\n\n// work with values\n\nreturn clone.ToReturnOptionObject();\n'})}),"\n",(0,o.jsxs)(t.p,{children:["If you need to interact with multiple ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/fieldobject",children:"FieldObjects"})," in each ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObject"})," (e.g., validating values)."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="Read RowObjects in a multiple-iteration table"',children:'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\n\nforeach (FormObject formObject in clone.Forms)\n{\n    if (formObject.FormId == secondFormId)\n    {\n        var selectedRow = formObject.CurrentRow;\n        // read RowObject\n        foreach (RowObject rowObject in formObject.OtherRows)\n        {\n            // read other RowObjects\n        }\n    }\n}\n\nreturn clone.ToReturnOptionObject();\n'})}),"\n",(0,o.jsx)(t.h2,{id:"adding-rowobjects",children:"Adding RowObjects"}),"\n",(0,o.jsx)(t.admonition,{type:"warning",children:(0,o.jsxs)(t.p,{children:["At this time we want to avoid using the ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObject"})," Builder to build the ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObjects"})," as it requires setting the RowId instead of allowing the AddRowObject method to auto-assign it. This may change in a future update."]})}),"\n",(0,o.jsx)(t.p,{children:"To take advantage of the library features described above, we want to use the AddRowObject method exclusively to add the new rows."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="Add multiple RowObjects to a multiple-iteration table"',children:'var clone = _optionObject.Clone();\n\nvar parentFormId = "110";\nvar miFormId = "123";\nvar parentRowId = clone.GetCurrentRowId(parentFormId);\n\nvar firstRow = new RowObject();\nfirstRow.RowAction = RowAction.Add;\nfirstRow.ParentRowId = parentRowId;\nfirstRow.AddFieldObject(new FieldObject("123.45", "Test #1"));\nclone.AddRowObject(miFormId, firstRow);\n\nvar secondRow = new RowObject();\nsecondRow.RowAction = RowAction.Add;\nsecondRow.ParentRowId = parentRowId;\nsecondRow.AddFieldObject(new FieldObject("123.45", "Test #2"));\nclone.AddRowObject(miFormId, secondRow);\n\nreturn clone.ToReturnOptionObject();\n'})}),"\n",(0,o.jsx)(t.h2,{id:"editing-rowobjects",children:"Editing RowObjects"}),"\n",(0,o.jsx)(t.p,{children:"Editing rows in a multiple-iteration table can be tricky. It is recommended to do plenty of testing and validation to ensure the user experience is as expected."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="Set a value on all rows in a multiple-iteration table"',children:'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\n\nforeach (FormObject formObject in clone.Forms)\n{\n    if (formObject.FormId == secondFormId)\n    {\n        var selectedRow = formObject.CurrentRow;\n        // Using the SetFieldValue method automatically sets the RowAction to EDIT\n        selectedRow.SetFieldValue("234.56", "Edited by ScriptLink API");\n\n        foreach (RowObject rowObject in formObject.OtherRows)\n        {\n            rowObject.SetFieldValue("234.56", "Edited by ScriptLink API");\n        }\n    }\n}\n\nreturn clone.ToReturnOptionObject();\n'})}),"\n",(0,o.jsx)(t.h2,{id:"deleting-rowobjects",children:"Deleting RowObjects"}),"\n",(0,o.jsxs)(t.p,{children:["Deleting ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObject"})," is accomplished by setting the ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowaction",children:"RowAction"})," to DELETE. This can be accomplished a couple ways. The first is the most straightforward but requires RowId of the ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObject"})," to delete."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="Delete a RowObject by RowId"',children:'var clone = _optionObject.Clone();\n\nvar rowIdToDelete = "123||4";\nclone.DeleteRowObject(rowIdToDelete);\n\nreturn clone.ToReturnOptionObject();\n'})}),"\n",(0,o.jsxs)(t.p,{children:["In most cases, the RowId of the ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObject(s)"})," will not be fixed or known when the API is called."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="Delete all rows in a multiple-iteration table"',children:'var clone = _optionObject.Clone();\n\nvar miFormId = "123";\n\nforeach (FormObject formObject in clone.Forms)\n{\n    if (formObject.FormId == secondFormId)\n    {\n        if (formObject.CurrentRow != null && formObject.CurrentRow.RowId)\n            formObject.DeleteRowObject(formObject.CurrentRow.RowId);\n        foreach (RowObject rowObject in formObject.OtherRows)\n        {\n            if (rowObject.RowId != null)\n                formObject.DeleteRowObject(rowObject.RowId);\n        }\n    }\n}\n\nreturn clone.ToReturnOptionObject();\n'})}),"\n",(0,o.jsx)(t.h2,{id:"handling-exceptions",children:"Handling Exceptions"}),"\n",(0,o.jsx)(t.p,{children:"Two of the most common errors that can occur include:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Attempting to reference a ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/formobject",children:"FormObject"})," that is not in this ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/optionobject2015",children:"OptionObject"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["Attempting to add multiple ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/rowobject",children:"RowObjects"})," to a non-multiple iteration ",(0,o.jsx)(t.a,{href:"/docs/dotnet/data-model/formobject",children:"FormObject"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"This can be handled with conditionals and exception handling."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="Handling exceptions with if/else and try/catch"',children:'var clone = _optionObject.Clone();\n\nvar parentFormId = "110";\nvar miFormId = "123";\n\nif (clone.IsFormPresent(parentFormId))\n{\n    try\n    {\n        var parentRowId = clone.GetCurrentRowId(parentFormId);\n        if (!clone.IsFormPresent(miFormId))\n        {\n            clone.AddFormObject(miFormId, true);\n        }\n\n        var firstRow = new RowObject();\n        firstRow.RowAction = RowAction.Add;\n        firstRow.ParentRowId = parentRowId;\n        firstRow.AddFieldObject(new FieldObject("123.45", "Test #1"));\n        clone.AddRowObject(miFormId, firstRow);\n\n        var secondRow = new RowObject();\n        secondRow.RowAction = RowAction.Add;\n        secondRow.ParentRowId = parentRowId;\n        secondRow.AddFieldObject(new FieldObject("123.45", "Test #2"));\n        clone.AddRowObject(miFormId, secondRow);\n\n        return clone.ToReturnOptionObject();\n    }\n    catch (ArgumentException ex) {\n        return clone.ToReturnOptionObject(ErrorCode.Error, ex.Message);\n    }\n}\nreturn clone.ToReturnOptionObject(ErrorCode.Error, "Could not find expected multiple-iteration form.");\n'})})]})}function j(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(s,{...e})}):s(e)}},9558:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/MultipleIterationTables-bb9b981214716fa312fe68eae1276870.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>d});var o=n(7294);const i={},r=o.createContext(i);function d(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);